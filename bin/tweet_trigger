#!/usr/bin/env python

from argparse import ArgumentParser
import os.path
import logging.handlers
from datetime import datetime
from datetime import timedelta
import sys
import configparser
import sqlite3
import warnings
import socket
import time
import urllib.request
import urllib.parse
import urllib.error
import json
import psycopg2
import tweepy
# Local imports 
from trigger_funcs import create_logger, get_region_name

"""
tweet_trigger - An application for tweeting new earthquake events.
This application presumes that it will be called by the Product Distribution Product Indexer.
"""

def check_event(eventdict):
    """
    Check that event should be tweeted. 
    eventdict: Event dictionary with the following fields, all containing STRINGS:
               - type: Message type (usually 'add')
               - id: Event id
               - source: Event source ('us', 'ci', etc.)
               - time: Event time (20110415173724.011)
               - lon: Event longitude
               - lat: Event latitude
               - depth: Event depth
               - mag: Event magnitude
               - loc: Event location (FE Region)
               - uri: Event location on USGS NEIC web site.
    Returns a boolean.
    """
    eid = eventdict['id']
    etime = eventdict['time']
    mag = eventdict['mag']
    lat = eventdict['lat']
    lon = eventdict['lon']
    loc = eventdict['loc']
 
    # Check 0: event magnitude greater than magnitude threshold
    magthresh = float(config.get('SETUP', 'magthresh'))

    if float(mag) < magthresh:
        info_string = "Ignoring event %s with magnitude %s less than threshold %s. Exiting" \
                      % (eid, mag, str(magthresh))
        logger.info(info_string)
        return False

    # Check 1: event is not too old
    timethresh = int(config.get('SETUP', 'timethresh'))
    eventdt = datetime.strptime(str(etime), '%Y%m%d%H%M%S.%f')
    mineventdt = utcnow - timedelta(minutes=timethresh)

    if (eventdt < mineventdt):
        info_string = """Ignoring event %s because its timestamp %s is older than minimum 
                      tweetable time %s. Exiting""" % (
                      eid, str(eventdt), 
                      str(mineventdt))
        logger.info(info_string)
        return False

    # Check 2: event is not in the future
    if (eventdt > utcnow):
        info_string = "Ignoring event %s with future time %s. Exiting" % (eid, str(eventdt))
        logger.info(info_string)
        return False

    # Check 3: event has not already been tweeted
    query = "select event_id from tweet_audit where event_id = '" + eid + "'"
    longquery = query + " union select NULL where not exists (" + query + ");"
    cur.execute(longquery)
    tweetmatch = cur.fetchone()[0]

    if tweetmatch is not None:
        logger.info("Ignoring already tweeted event %s. Exiting", eid)
        return False

    # Check 4: tweet has not already been sent for another event which is 
    # close in time and space to this event
    tooclosedistance = config.get('SETUP', 'tooclosedistance')
    toooldtime = config.get('SETUP', 'toooldtime')
    latlondiff = format((int(tooclosedistance)/111), '.1f')
    eventtime = etime[:8] + 'T' + etime[8:]

    query = ("select event_id from tweet_audit where (event_time <= (timestamp'{0}' + interval "
             "'{1}' minute) and event_time >= (timestamp'{2}' - interval '{3}' minute)) and " 
             "abs(event_lat - {4}) <= {5} and abs(event_lon - {6}) <= {7}")
    query = query.format(eventtime, toooldtime, eventtime, toooldtime, lat, str(latlondiff), 
                         lon, str(latlondiff))
    longquery = query + " union select NULL where not exists (" + query + ");"
    cur.execute(longquery)
    tweetmatch = cur.fetchone()[0]

    if tweetmatch is not None:
        info_string = """Ignoring event '%s', close in time and location to already tweeted 
                      event %s. Exiting""" % (
                      eid, 
                      tweetmatch)
        logger.info(info_string)
        return False

    return True

def get_short_url(eventdict):
    """
    Shorten url to event page (on earthquake.usgs.gov) for tweets using Go.USA.gov API.
    eventdict: Event dictionary with the following fields, all containing STRINGS:
               - type: Message type (usually 'add')
               - id: Event id
               - source: Event source ('us', 'ci', etc.)
               - time: Event time (20110415173724.011)
               - lon: Event longitude
               - lat: Event latitude
               - depth: Event depth
               - mag: Event magnitude
               - loc: Event location (FE Region)
               - uri: Event location on USGS NEIC web site.
    Returns url string. If an error is encountered, this will return the unshortened url.
    """
    gousa_username = config.get('BITLY', 'gousa_username')
    gousa_apikey = config.get('BITLY', 'gousa_apikey')
    longurl = eventdict['uri'].replace('://','%3A%2F%2F')
    longurl = longurl.replace('/','%2F')

    # Get url to connect to go.usa.gov api
    http = config.get('SETUP', 'short_urltemplate')
    http = http.replace('[LOGIN]', gousa_username)
    http = http.replace('[KEY]', gousa_apikey)
    http = http.replace('[LONGURL]', longurl)

    eid = eventdict['id']

    # Connect to go.usa.gov api
    shorturl = eventdict['uri']
    try:
        fh = urllib.request.urlopen(http)
        regstr = fh.read().decode('utf-8')
        fh.close()
        jdict = json.loads(regstr)
        statuscode = jdict['response']['0'][0]['status_code']

        if statuscode == '200':
            shorturl = jdict['response']['data']['entry'][0]['short_url']
        else:
            logger.warning("Go.usa.gov returned error while shortening url for event %s", 
                           eid)
            pass
    except Exception as e:
        logger.error("Could not shorten URL for event %s", eid, exc_info=True)
        pass

    return shorturl

def add_tweet_to_db(eventdict):
    """
    Adds tweeted event to tweet_audit table in database. 
    eventdict: Event dictionary with the following fields, all containing STRINGS:
               - type: Message type (usually 'add')
               - id: Event id
               - source: Event source ('us', 'ci', etc.)
               - time: Event time (20110415173724.011)
               - lon: Event longitude
               - lat: Event latitude
               - depth: Event depth
               - mag: Event magnitude
               - loc: Event location (FE Region)
               - uri: Event location on USGS NEIC web site.
    """
    eid = eventdict['id']
    etime = eventdict['time']
    mag = eventdict['mag']
    lat = eventdict['lat']
    lon = eventdict['lon']
    loc = eventdict['loc']
    eventtime = etime[:8] + 'T' + etime[8:]

    try:
        cur.execute("insert into tweet_audit (event_id, event_lat, event_lon, event_time, " + \
                    "magnitude, tweet_time) values (%s, %s, %s, %s, %s, %s);", (eid, lat, lon,
                    eventtime, mag, utcnow))
        logger.info("Successfully inserted tweet info for event %s into tweet_audit table.", eid)
    except Exception as e:
        logger.error("Failed to insert event dictionary into tweet_audit table", exc_info=True)

def tweet_event(eventdict):
    """
    Tweet out earthquake information through Twitter Web API. 
    eventdict: Event dictionary with the following fields, all containing STRINGS:
               - type: Message type (usually 'add')
               - id: Event id
               - source: Event source ('us', 'ci', etc.)
               - time: Event time (20110415173724.011)
               - lon: Event longitude
               - lat: Event latitude
               - depth: Event depth
               - mag: Event magnitude
               - loc: Event location (FE Region)
               - uri: Event location on USGS NEIC web site.
    Returns (boolean, msg, time).
               -boolean: tweet_event() completed without errors
               -msg: errormsg if boolean = FALSE, successmsg if boolean = TRUE
               -time: time to tweet event after tweet_event() was called
    """
    try:
        t1 = datetime.now()
        # Check that event is okay to be tweeted, if not exit
        eventpassed = check_event(eventdict)
        if not eventpassed:
            return(False,"Event did not pass checks.",0)

        eid = eventdict['id']
        etime = eventdict['time']
        mag = eventdict['mag']
        lat = eventdict['lat']
        lon = eventdict['lon']
        loc = eventdict['loc']

        # Get short URL used in tweet string
        shorturl = get_short_url(eventdict)

        # Connect to Twitter API and tweet event information
        twitterapikey = config.get('TWITTER', 'twitter_apikey')
        apisecret = config.get('TWITTER', 'twitter_apisecret')
        accesstoken = config.get('TWITTER', 'twitter_accesstoken')
        secrettoken = config.get('TWITTER', 'twitter_accesstoken_secret')
        origindate = eventdatetime.strftime('%b-%d %H:%M UTC')

        # Create string that will be tweeted
        tweetstring = "Prelim M" + "%s earthquake %s %s, updates %s" % (mag, loc, origindate, shorturl)

        # Connect to twitter API and send tweet
        auth = tweepy.OAuthHandler(twitterapikey, apisecret)
        auth.set_access_token(accesstoken, secrettoken)
        api = tweepy.API(auth)

        status = api.update_status(tweetstring)
        info_string = "Tweeting event %s - %s" % (eid, tweetstring)
        logger.info(info_string)
        
        # Calculate time it took to tweet event
        t2 =  datetime.now()
        td=t2-t1
    except Exception as e:
        error_string = "Tweet for event %s failed with error:" % eid
        logger.error(error_string, exc_info=True)
        return(False,e,0)

    add_tweet_to_db(eventdict)

    return(True,tweetstring,td)

def close_all():
    """
    Close database connections and logfile handlers.
    """

    # Close database connections
    cur.close()
    conn.close()

def call_tweeter(options):
    """
    Called by __main__. Creates event dictionary and calls tweet_event(). 
    options: Dictionary with the following fields, all containing STRINGS:
             - status: Event status (default is 'UPDATE')
             - preferredMagnitude: Prefered event magnitude
             - preferredLongitude: Preferred event longitude
             - preferredLatitude: Preferred event latitude
             - code: Event code
             - action: Action to take with event
             - eventIDList: All associated event IDs for event
             - preferredEventTime: Preferred event time
             - source: Network that generated product
             - preferredDepth: Preferred event depth
             - updateTime: Time when this version of event was updated
             - trackerURL: Location where tracking updates are sent 
             - directory: Path to directory that contains product contents
             - preferredID: Preferred event ID
             - type: Event type (should be 'origin')
    """
    # If event is not an event add or event update trigger, exit application
    if options['action'] not in ['EVENT_ADDED', 'EVENT_UPDATED']:
        info_string = """Unacceptable action '%s'. Ignoring all actions but 'EVENT_ADDED' and
                         'EVENT_UPDATED'. Exiting""" % options['action']
        logger.info(info_string)
        # logger.info("Ignoring all actions but 'EVENT_ADDED' and 'EVENT_UPDATED'. Exiting")
        close_all()
        sys.exit(0)

    # If network source is in ignoreregions list, exit application
    ignoreregions = config.get('SETUP','ignoreregions').split(',')
    if options['source'].lower() in ignoreregions:
        logger.info("Ignoring region '%s'.  Exiting", options['source'].lower())
        close_all()
        sys.exit(0)

    # If event code is not same as preferred event ID, exit application
    if options['code'] != options['preferredID']:
        logger.info("Ignoring non-preferred ID '%s'.  Exiting", options['code'])
        close_all()
        sys.exit(0)

    try:
        eventdict = {}
        eventdict['type'] = 'add'
        eventdict['id'] = options['preferredID'].lower()
        eventdict['source'] = options['source'].lower()
        eventdict['time'] = eventdatetime.strftime('%Y%m%d%H%M%S.00')
        eventdict['lat'] = '%.4f' % float(options['preferredLatitude'])
        eventdict['lon'] = '%.4f' % float(options['preferredLongitude'])
        eventdict['depth'] = '%.1f' % float(options['preferredDepth'])
        eventdict['mag'] = '%.1f' % float(options['preferredMagnitude'])
        eventdict['loc'] = get_region_name(float(options['preferredLatitude']), 
                                           float(options['preferredLongitude']))
        urlt = config.get('SETUP', 'long_urltemplate')
        eventdict['uri'] = urlt.replace('[EVENT]', options['preferredID'].lower())
    except Exception as e:
        logger.error("Error caught while creating event dictionary", exc_info=True)

    res, msg, nseconds = tweet_event(eventdict)
    eid = eventdict['id']

    if not res:
        close_all()
        sys.exit(1)
    else:
        info_string = "Tweeter responded for event %s in %s seconds with message '%s'" % (
                      eid, str(nseconds), msg)
        logger.info(info_string)

        close_all()
        sys.exit(0)

if __name__ == '__main__':
    parser = ArgumentParser(prog='tweet_trigger', usage='%(prog)s [options]')

    # Product Indexer command line API options
    parser.add_argument("--directory", dest="directory",
                      help="""Optional. <directory> is a path to a directory that contains product contents. Any directory
                      hierarchy within <directory> is preserved.""", metavar="DIRECTORY")
    
    parser.add_argument("--type", dest="type",
                      help="""Product TYPE. A short identifier that is shared by all sources of a type of product.
                      Examples include origin, shakemap, pager, etc. """, metavar="TYPE")
    
    parser.add_argument("--code", dest="code",
                      help="""Event CODE: 2 character source code plus 8 character network event code.
                      Examples include us2009abcd and ci12345678""", metavar="CODE")
    
    parser.add_argument("--source", dest="source",
                      help="""Network SOURCE that generated this product, as a two character network code.
                      Examples include us, nc, and ci.""", metavar="SOURCE")
    
    parser.add_argument("--updateTime", dest="updateTime",
                      help="""Optional. Default is now. When this version of source+type+code was updated.
                      An example is 2010-01-14T14:11:28.691-07:00.""", metavar="UPDATETIME")
    
    parser.add_argument("--status", dest="status",
                      help="""Optional. Default is UPDATE. Product generators may use any status without spaces.
                      However, the status must be used consistently for all products of that type.
                      Examples include UPDATE, and DELETE.""", metavar="STATUS")
    
    parser.add_argument("--trackerURL", dest="trackerURL",
                      help="A location where tracking updates are sent.", metavar="TRACKERURL")

    parser.add_argument("--action", dest="action",
                      help="""ACTION is one of: EVENT_ADDED,EVENT_SPLIT,EVENT_UPDATED,EVENT_DELETED,EVENT_MERGED,EVENT_ARCHIVED
                      PRODUCT_ADDED,PRODUCT_UPDATED,PRODUCT_DELETED,PRODUCT_ARCHIVED""", metavar="ACTION")
    
    parser.add_argument("--preferred-eventid", dest="preferredID",
                      help="""The full (source+code) preferred event ID for this event.""", metavar="PREFERREDID")
    
    parser.add_argument("--eventids", dest="eventIDList",
                      help="""All of the associated event IDs for this event.""", metavar="EVENTIDS")
    
    parser.add_argument("--preferred-magnitude", dest="preferredMagnitude",
                      help="""The preferred magnitude for this event.""", metavar="PREFERREDMAG")
    
    parser.add_argument("--preferred-latitude", dest="preferredLatitude",
                      help="""The preferred latitude for this event.""", metavar="PREFERREDLAT")
    
    parser.add_argument("--preferred-longitude", dest="preferredLongitude",
                      help="""The preferred longitude for this event.""", metavar="PREFERREDLON")
    
    parser.add_argument("--preferred-depth", dest="preferredDepth",
                      help="""The preferred depth for this event.""", metavar="PREFERREDDEPTH")
    
    parser.add_argument("--preferred-eventtime", dest="preferredEventTime",
                      help="""The preferred event time (2010-01-14T14:11:28.691Z).""", metavar="PREFERREDDEPTH")


    # Filter out any options that are not in the above list
    # Get the list of defined options
    options = {}
    validargs, invalidargs = parser.parse_known_args()
    options = vars(validargs)
    
    # Print help menu and exit if none of options are defined
    foundone = False
    for argvalue in options.values():
        if argvalue != None:
             foundone = True
             break
    if not foundone:
        parser.print_help()
        sys.exit(0)

    # Check that there is a preferred magnitude (fix to recurring dictionary error)
    if options['preferredMagnitude'] == 'null':
        sys.exit(0)

    # Read in config file
    homedir = os.path.dirname(os.path.abspath(__file__))
    configfile = os.path.join(homedir, 'tweet_config.ini')
    if not os.path.isfile(configfile):
        print("Config file '%s' does not exist.  Exiting" % configfile)
        sys.exit(1)

    config = configparser.ConfigParser()
    config.read_file(open(configfile))

    if not config.has_section('SETUP'):
        print("Config file '%s' is missing section 'SETUP'.  Exiting" % configfile)
        sys.exit(1)

    reqoptions = ['magthresh', 'timethresh', 'tooclosedistance', 'toooldtime', 
                  'ignoreregions', 'long_urltemplate', 'logging_level', 'logfile']
    missing = []
    for option in reqoptions:
        if not config.has_option('SETUP', option):
            missing.append(option)
    if len(missing):
        print("Config file '%s' is missing SETUP options '%s'.  Exiting" % (configfile, ','.join(missing)))
        sys.exit(1)

    # Create dictionary to use when passing parameters into create_logger()
    logdict = {}
    # Instruct logging module when to back up logfile and create new, empty one
    # Logfile will be archived once a week on Sunday, and only 8 will be kept at a time.
    logdict['bkup_inttype'] = 'W6' # W6 = Sunday
    logdict['bkup_interval'] = 1
    logdict['bkup_count'] = 8
    logdict['bkup_suffix'] = '%Y-%m-%d_%H:%M:%S'
    logdict['homedir'] = homedir
    logdict['config'] = config

    # Create logfile
    logger = create_logger(logdict)

    # Connect to database
    prefix = 'testdb'
    port = config.get('DATABASE',prefix+'_port')
    user = config.get('DATABASE',prefix+'_user')
    dbname = config.get('DATABASE',prefix+'_name')
    password = config.get('DATABASE',prefix+'_password')

    conn = psycopg2.connect(dbname=dbname, user=user, port=port, password=password)
    conn.autocommit = True
    cur = conn.cursor()
    
    # Variables used later on
    utcnow = datetime.utcnow()
    eventdatetime = datetime.strptime(options['preferredEventTime'], '%Y-%m-%dT%H:%M:%S.%fZ')

    call_tweeter(options)    
